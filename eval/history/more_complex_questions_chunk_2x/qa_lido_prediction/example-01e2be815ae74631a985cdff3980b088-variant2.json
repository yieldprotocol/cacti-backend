{"chat_variant": 2, "example": {"scraped_filename": "https:__docs.lido.fi_contracts_lido-oracle.txt", "context": "LidoOracle | Lido Docs\n\nLidoOracle\n\nLidoOracle\n\nLidoOracle is a contract where oracles send addresses' balances controlled by the DAO on the ETH\n\n2.0 side. The balances can go up because of reward accumulation and can go down due to slashing and\n\nstaking penalties. Oracles are assigned by the DAO.\n\nOracle daemons push their reports every frame (225 epochs currently, equal to one day) and when the\n\nnumber of the same reports reaches the 'quorum' value, the report is pushed to the\n\nLido contract.\n\nnote\n\nHowever, daily oracle reports shouldn't be taken for granted. Oracle daemons could stop pushing their reports for extended periods of time in case of no finality on Beacon Chain. This would ultimately result in no oracle reports and no stETH rebases for this whole period.\n\nThe following mechanisms are also worth mentioning.\n\nStore the collected reports as an array\u200b\n\nThe report variant is a report with a counter - how many times this report was pushed by\n\noracles. This strongly simplified logic of _getQuorumReport, because in the majority of cases, we\n\nonly have 1 variant of the report so we just make sure that its counter exceeded the quorum value.\n\nnote\n\nThe important note here is that when we remove an oracle (with removeOracleMember), we\n\nalso need to remove her report from the currently accepted reports. As of now, we do not keep a\n\nmapping between members and their reports, we just clean all existing reports and wait for the\n\nremaining oracles to push the same epoch again.\n\nAdd calculation of staker rewards APR\u200b\n\nTo calculate the percentage of rewards for stakers, we store and provide the following data:\n\nnote\n\nIt is important to note here, that we collect post/pre pair (not current/last), to avoid\n\nthe influence of new staking during the epoch.\n\nTo calculate the APR, use the following formula:\n\nSanity checks the oracles reports by configurable values\u200b\n\nIn order to limit the misbehaving oracles impact, we want to limit oracles report change by 10% APR\n\nincrease in stake and 5% decrease in stake. Both values are configurable by the governance in case\n\nof extremely unusual circumstances.\n\nnote\n\nNote that the change is evaluated after the quorum of oracles reports is reached, and not\n\non the individual report.\n\nAnd the logic of reporting to the Lido contract got a call to _reportSanityChecks that does\n\nthe following. It compares the preTotalPooledEther and postTotalPooledEther (see above) and\n\nReceiver function to be invoked on report pushes\u200b\n\nTo provide the external contract with updates on report pushes (every time the quorum is reached\n\namong oracle daemons data), we provide the following setter and getter functions. It might be\n\nneeded to implement some updates to the external contracts that should happen at the same tx the\n\nrebase happens (e.g. adjusting uniswap v2 pools to reflect the\n\nrebase).\n\nAnd when the callback is set, the following function will be invoked on every report push.\n\nThe arguments provided are the same as described in section above.\n\nSee also the CompositePostRebaseBeaconReceiver\n\nadapter contract which allows to set multiple callbacks.\n\nView Methods\u200b\n\ngetLido()\u200b\n\nReturn the Lido contract address.\n\ngetQuorum()\u200b\n\nReturn the number of exactly the same reports needed to finalize the epoch.\n\ngetAllowedBeaconBalanceAnnualRelativeIncrease()\u200b\n\nReturn the upper bound of the reported balance possible increase in APR. See above about\n\nsanity checks.\n\ngetAllowedBeaconBalanceRelativeDecrease()\u200b\n\nReturn the lower bound of the reported balance possible decrease. See above about sanity\n\nchecks.\n\ngetBeaconReportReceiver()\u200b\n\nReturn the receiver contract address to be called when the report is pushed to Lido.\n\ngetCurrentOraclesReportStatus()\u200b\n\nReturn the current reporting bitmap, representing oracles who have already pushed their version of\n\nreport during the expected epoch.\n\nnote\n\nEvery oracle bit corresponds to the index of the oracle in the current members list\n\ngetCurrentReportVariantsSize()\u200b\n\nReturn the current reporting variants array size.\n\ngetCurrentReportVariant()\u200b\n\nReturn the current reporting array element with index _index.", "interactions": [{"input": "What is LidoOracle?", "response": "LidoOracle is a contract that enables oracles to send the balances controlled by the DAO on the Ethereum 2.0 side. Oracles push their reports every frame (225 epochs currently, equal to one day) and when the number of reports reaches the \"quorum\" value, the report is pushed to the Lido contract."}, {"input": "What mechanisms are implemented by LidoOracle?", "response": "LidoOracle implements mechanisms such as storing collected reports as an array, calculating staker rewards APR, performing sanity checks on oracle reports, and providing a receiver function to be invoked on report pushes. It also allows users to view methods such as getting the Lido contract address, quorum number, allowed beacon balance annual relative increase, allowed beacon balance relative decrease, beacon report receiver, current oracles report status, current report variants size, and the current report variant."}]}, "responses": ["LidoOracle is a contract where oracles send addresses' balances controlled by the DAO on the ETH 2.0 side. The balances can go up because of reward accumulation and can go down due to slashing and staking penalties. Oracles are assigned by the DAO.", "LidoOracle is a contract where oracles send addresses' balances controlled by the DAO on the ETH 2.0 side. The balances can go up because of reward accumulation and can go down due to slashing and staking penalties. Oracles are assigned by the DAO. Oracle daemons push their reports every frame (225 epochs currently, equal to one day) and when the number of the same reports reaches the 'quorum' value, the report is pushed to the Lido contract. Upon every update submitted by the LidoOracle contract, the system recalculates the total stETH token balance. <|showOracleOperatorManual()|>"]}
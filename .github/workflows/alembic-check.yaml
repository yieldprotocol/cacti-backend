# This workflow will apply Alembic migrations and check if we are missing any.
# If it fails, check out alembic/README.md for how to generate a migration.

name: Alembic migration check

on:
  push:
    branches: [ master, dev ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']

    steps:
    - name: Checkout backend
      uses: actions/checkout@v2
      with:
        path: backend

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt

    - name: Set environment for branch
      run: |
        echo "SERVER_HOST=" >> "$GITHUB_ENV"
        echo "SERVER_ORIGINS=" >> "$GITHUB_ENV"
        echo "SERVER_SECRET_KEY=" >> "$GITHUB_ENV"

        if [[ ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} == 'master' ]]; then
          echo "ENV_TAG=prod" >> "$GITHUB_ENV"
        else
          echo "ENV_TAG=dev" >> "$GITHUB_ENV"
          echo "WEAVIATE_URL=${{ secrets.DEV_WEAVIATE_URL }}" >> "$GITHUB_ENV"
          echo "WEAVIATE_API_KEY=" >> "$GITHUB_ENV"
          echo "CHATDB_URL=${{ secrets.DEV_CHATDB_URL }}" >> "$GITHUB_ENV"
        fi
    - name: Run check
      run: |
        cd backend
        ./db_schema_sync.sh
        alembic check

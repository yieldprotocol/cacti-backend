widget 1:
  description: Transfer a token from a user's wallet to another address
  name: display_transfer
  parameters:
    properties:
      address:
        description: Transfer recipient address.
        type: string
      amount:
        description: Quantity to transfer.
        type: string
      token:
        description: Symbol of the token being transferred.
        type: string
    required:
    - token
    - amount
    - address
    type: object
  return_value_description: ''
  widget_command: <|display-transfer({token},{amount},{address})|>
widget 10:
  description: Buy an NFT asset of a collection on the OpenSea marketplace, given
    its network, address, and token ID. Don't use this if we don't have the collection
    network and address and token ID of the asset we want to purchase.
  name: fetch_nft_buy_asset
  parameters:
    properties:
      address:
        description: Contract address of the NFT asset.
        type: string
      network:
        description: Network of the NFT asset.
        type: string
      tokenID:
        description: Token ID of the asset.
        type: string
    required:
    - network
    - address
    - tokenID
    type: object
  return_value_description: a transaction dialog for purchase of the NFT
  widget_command: <|fetch-nft-buy-asset({network},{address},{tokenID})|>
widget 11:
  description: Search for NFT collections given a query phrase, a description, or
    a name
  name: fetch_nft_search
  parameters:
    properties:
      query:
        description: String of keywords to describe the kind of NFT collections to
          find.
        type: string
    required:
    - query
    type: object
  return_value_description: a list of text describing NFT collections that were found
  widget_command: <|fetch-nft-search({query})|>
widget 12:
  description: 'List assets with a particular trait name and value from a specific
    NFT collection given its network and address. Don''t use this if we don''t have
    the collection network and address.

    Required parameters:'
  name: fetch_nft_collection_assets_by_trait
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: Network of the NFT collection.
        type: string
      traitName:
        description: Name of trait.
        type: string
      traitValue:
        description: Value of trait.
        type: string
    required:
    - network
    - address
    - traitName
    - traitValue
    type: object
  return_value_description: a list of text describing NFT assets that match the trait
    value
  widget_command: <|fetch-nft-collection-assets-by-trait({network},{address},{traitName},{traitValue})|>
widget 13:
  description: List assets available for purchase with a particular trait name and
    value from a specific NFT collection given its network and address. Don't use
    this if we don't have the collection network and address.
  name: fetch_nft_collection_assets_for_sale_by_trait
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: Network of the NFT collection.
        type: string
      traitName:
        description: Name of trait.
        type: string
      traitValue:
        description: Value of trait.
        type: string
    required:
    - network
    - address
    - traitName
    - traitValue
    type: object
  return_value_description: a list of text describing NFT assets for sale/available
    for purchase that match the trait value
  widget_command: <|fetch-nft-collection-assets-for-sale-by-trait({network},{address},{traitName},{traitValue})|>
widget 14:
  description: Retrieve data and assets of an NFT collection given its network and
    address.
  name: fetch_nft_collection_info
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: network of the NFT collection.
        type: string
    required:
    - network
    - address
    type: object
  return_value_description: text with data and some assets of the NFT collection
  widget_command: <|fetch-nft-collection-info({network},{address})|>
widget 15:
  description: Retrieve assets available for purchase of an NFT collection given its
    network and address.
  name: fetch_nft_collection_assets_for_sale
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: network of the NFT collection.
        type: string
    required:
    - network
    - address
    type: object
  return_value_description: text with assets of the NFT collection that are for sale/available
    for purchase
  widget_command: <|fetch-nft-collection-assets-for-sale({network},{address})|>
widget 16:
  description: Retrieve traits of an NFT collection given its network and address.
  name: fetch_nft_collection_traits
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: Network of the NFT collection.
        type: string
    required:
    - network
    - address
    type: object
  return_value_description: a list of text describing traits of the NFT collection
  widget_command: <|fetch-nft-collection-traits({network},{address})|>
widget 17:
  description: Retrieve trait values of a trait of an NFT collection given its network
    and address.
  name: fetch_nft_collection_trait_values
  parameters:
    properties:
      address:
        description: Contract address of the NFT collection.
        type: string
      network:
        description: network of the NFT collection.
        type: string
      traitName:
        description: Name of trait to fetch values of.
        type: string
    required:
    - network
    - address
    - traitName
    type: object
  return_value_description: a list of text describing values of the trait of the NFT
    collection
  widget_command: <|fetch-nft-collection-trait-values({network},{address},{traitName})|>
widget 18:
  description: Retrieve data and traits of an NFT asset in a collection given its
    network, address, and token ID.
  name: fetch_nft_asset_traits
  parameters:
    properties:
      address:
        description: Contract address of the NFT asset.
        type: string
      network:
        description: Network of the NFT asset.
        type: string
      tokenID:
        description: Token ID of the asset.
        type: string
    required:
    - network
    - address
    - tokenID
    type: object
  return_value_description: text with data and list of trait names and values of the
    NFT asset
  widget_command: <|fetch-nft-asset-traits({network},{address},{tokenID})|>
widget 19:
  description: Get the yields for crypto assets. The user may not specify all parameters
    so do not guess any parameter.
  name: fetch_yields
  parameters:
    properties:
      count:
        description: Number of yield sources. Use '*' when parameter not available.
        type: string
      network:
        description: Blockchain to get the yield for. Normalize the network name to
          its popular representation in the ecosystem. Use '*' when parameter not
          available or the user wants all networks.
        type: string
      token:
        description: Token to get the yield for. Normalize the token name to its popular
          symbol representation in the ecoystem. Use '*' when parameter not available
          or the user wants all tokens.
        type: string
    required:
    - token
    - network
    - count
    type: object
  return_value_description: JSON object with yield information
  widget_command: <|fetch-yields({token},{network},{count})|>
widget 2:
  description: Get the price of a token. Note, when the quoteToken isn't explicitly
    specified assume it to be USD
  name: fetch_price
  parameters:
    properties:
      basetoken:
        description: Token to get the price of.
        type: string
      quotetoken:
        description: Token to use as units for price.
        type: string
    required:
    - basetoken
    - quotetoken
    type: object
  return_value_description: price of a base token in units of a quote token.
  widget_command: <|fetch-price({baseToken},{quoteToken})|>
widget 20:
  description: Get the ENS domain name (*.eth) for a wallet address.
  name: ens_from_address
  parameters:
    properties:
      address:
        description: Address of the account or wallet.
        type: string
    required:
    - address
    type: object
  return_value_description: a humanreadable string with ENS domain
  widget_command: <|ens-from-address({address})|>
widget 21:
  description: Get the wallet address for an ENS domain name (*.eth).
  name: address_from_ens
  parameters:
    properties:
      domain:
        description: Domain name of the account or wallet.
        type: string
    required:
    - domain
    type: object
  return_value_description: a humanreadable string with wallet address
  widget_command: <|address-from-ens({domain})|>
widget 22:
  description: Register an ENS domain that ends with *.eth
  name: register_ens_domain
  parameters:
    properties:
      domain:
        description: Domain name to register.
        type: string
    required:
    - domain
    type: object
  return_value_description: ''
  widget_command: <|register-ens-domain({domain})|>
widget 23:
  description: Set the text record for an ENS domain that ends with *.eth in a key
    value pair format.
  name: set_ens_text
  parameters:
    properties:
      domain:
        description: ENS domain name.
        type: string
      key:
        description: Key of the text record.
        type: string
      value:
        description: Value of the text record.
        type: string
    required:
    - domain
    - key
    - value
    type: object
  return_value_description: ''
  widget_command: <|set-ens-text({domain},{key},{value})|>
widget 24:
  description: Set a primary ENS name for their connected wallet account.
  name: set_ens_primary_name
  parameters:
    properties:
      domain:
        description: Domain name to use as primary ENS name.
        type: string
    required:
    - domain
    type: object
  return_value_description: ''
  widget_command: <|set-ens-primary-name({domain})|>
widget 25:
  description: Set an nft as their ENS domain's avatar. Do not guess any parameter,
    if any parameter is missing, set the default value as 'None'.
  name: set_ens_avatar_nft
  parameters:
    properties:
      domain:
        description: ENS domain name.
        type: string
      nftContractAddress:
        description: Contract address of the NFT.
        type: string
      nftId:
        description: Token ID of the NFT.
        type: string
    required:
    - domain
    - nftContractAddress
    - nftId
    type: object
  return_value_description: ''
  widget_command: <|set-ens-avatar-nft({domain},{nftContractAddress},{nftId})|>
widget 26:
  description: Deposit or supply tokens into Aave project
  name: aave_supply
  parameters:
    properties:
      amount:
        description: Quantity to supply.
        type: string
      token:
        description: Token to supply.
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|aave-supply({token},{amount})|>
widget 27:
  description: Borrow tokens from Aave project
  name: aave_borrow
  parameters:
    properties:
      amount:
        description: Quantity to borrow.
        type: string
      token:
        description: Token to borrow.
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|aave-borrow({token},{amount})|>
widget 28:
  description: Repay back borrowed tokens from Aave project
  name: aave_repay
  parameters:
    properties:
      amount:
        description: Quantity to repay.
        type: string
      token:
        description: Token to repay.
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|aave-repay({token},{amount})|>
widget 29:
  description: Withdraw deposited tokens from Aave project
  name: aave_withdraw
  parameters:
    properties:
      amount:
        description: quantity to withdraw.
        type: string
      token:
        description: Token to withdraw.
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|aave-withdraw({token},{amount})|>
widget 3:
  description: Get the balance of a token in an account or wallet. Don't use this
    if we don't have the address.
  name: fetch_balance
  parameters:
    properties:
      address:
        description: Address of the account or wallet to check the balance of.
        type: string
      token:
        description: Token to get the balance of.
        type: string
    required:
    - token
    - address
    type: object
  return_value_description: balance of a token in an account or wallet, in decimal
    units
  widget_command: <|fetch-balance({token},{address})|>
widget 30:
  description: Used for the Compound project to allow the user to yield farm by putting
    tokens or depositing tokens of a certain amount into the Compound project.
  name: display_yield_farm
  parameters:
    properties:
      amount:
        description: Amount of token to deposit in the project.
        type: string
      network:
        description: Network or blockchain of the project. Default to Ethereum if
          not specified.
        type: string
      project:
        description: Name of the project to deposit the token in.
        type: string
      token:
        description: Token to deposit in the project.
        type: string
    required:
    - project
    - network
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|display-yield-farm({project},{network}, {token}, {amount})|>
widget 31:
  description: Used when we need to handle common questions and answers about the
    chat assistant app, what it can do, how to interact with it, at a high-level.
    Only useful for questions about the chat app experience. It does not know specific
    information about the web3 ecosystem, of tokens or NFTs or contracts, or access
    to live data and APIs.
  name: fetch_app_info
  parameters:
    properties:
      query:
        description: a standalone query with all relevant contextual details pertaining
          to the chat web application.
        type: string
    required:
    - query
    type: object
  return_value_description: an answer to the question, with suggested followup questions
    if available
  widget_command: <|fetch-app-info({query})|>
widget 32:
  description: Answer questions using general content scraped from web3 sites. It
    does not know about this app or about widget magic commands for invoking transactions
    or fetching data about specific things like NFTs or balances.
  name: fetch_scraped_sites
  parameters:
    properties:
      query:
        description: a standalone question representing information to be retrieved
          from the index.
        type: string
    required:
    - query
    type: object
  return_value_description: a summarized answer with source citations
  widget_command: <|fetch-scraped-sites({query})|>
widget 33:
  description: Used to bridge and deposit tokens from mainnet L1 to zksync L2.
  name: display_zksync_deposit
  parameters:
    properties:
      amount:
        description: quantity to deposit
        type: string
      token:
        description: token to deposit
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|display-zksync-deposit({token},{amount})|>
widget 34:
  description: Used to withdraw tokens from zksync L2 to mainnet L1
  name: display_zksync_withdraw
  parameters:
    properties:
      amount:
        description: quantity to deposit
        type: string
      token:
        description: token to deposit
        type: string
    required:
    - token
    - amount
    type: object
  return_value_description: ''
  widget_command: <|display-zksync-withdraw({token},{amount})|>
widget 4:
  description: Get the balance of a token in the user's connected wallet
  name: fetch_my_balance
  parameters:
    properties:
      token:
        description: Token to get the balance of.
        type: string
    required:
    - token
    type: object
  return_value_description: balance of a token in connected wallet, in decimal units
  widget_command: <|fetch-my-balance({token})|>
widget 5:
  description: Get the transaction details in an account or wallet
  name: fetch_transactions
  parameters:
    properties:
      address:
        description: Address of the account or wallet to check the transactions of.
        type: string
      last_n:
        description: How many latest transactions the user wants to get.
        type: string
    required:
    - address
    - last_n
    type: object
  return_value_description: the transaction details
  widget_command: <|fetch-transactions({address},{last_n})|>
widget 6:
  description: Get all gas used for transactions in an account or wallet
  name: fetch_gas
  parameters:
    properties:
      address:
        description: Address of the account or wallet to check the gas of.
        type: string
    required:
    - address
    type: object
  return_value_description: the gas amount used
  widget_command: <|fetch-gas({address})|>
widget 7:
  description: Get all ETH inflow into an account or wallet
  name: fetch_eth_in
  parameters:
    properties:
      address:
        description: Address of the account or wallet to check the inflow ETH.
        type: string
    required:
    - address
    type: object
  return_value_description: the inflow ETH amount
  widget_command: <|fetch-eth-in({address})|>
widget 8:
  description: Get all ETH outflow from an account or wallet
  name: fetch_eth_out
  parameters:
    properties:
      address:
        description: Address of the account or wallet to check the outflow ETH.
        type: string
    required:
    - address
    type: object
  return_value_description: the outflow ETH amount
  widget_command: <|fetch-eth-out({address})|>
widget 9:
  description: 'use the Uniswap decentralized application for trading one token for
    another. To create a Uniswap transaction, you need either:

    1.) A token to sell, a token to buy, the transaction keyword "SELLAMOUNT", and
    an amount to sell, OR

    2.) A token to sell, a token to buy, the transaction keyword "BUYAMOUNT", and
    an amount to buy.'
  name: display_uniswap
  parameters:
    properties:
      amount:
        description: Amount of token described by transaction keyword that we are
          trying to buy or sell.
        type: string
      tokenToBuy:
        description: Token to buy in the swap transaction.
        type: string
      tokenToSell:
        description: Token to sell in the swap transaction.
        type: string
      transactionKeyword:
        description: Either SELLAMOUNT if amount refers to token to sell or BUYAMOUNT
          if amount refers to token to buy.
        type: string
    required:
    - tokenToSell
    - tokenToBuy
    - transactionKeyword
    - amount
    type: object
  return_value_description: ''
  widget_command: <|display-uniswap({tokenToSell},{tokenToBuy},{transactionKeyword},{amount})|>
